import{_ as i,S as n,n as t,p as a,a6 as o,C as s}from"./framework-a770bce2.js";const d={};function l(u,e){const r=n("CVETracker");return t(),a("div",null,[e[0]||(e[0]=o(`<h1 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h1><p>TuxCare&#39;s Endless Lifecycle Support (ELS) for Spring provides security updates, system enhancement patches, and selected bug fixes, that are integral to the stable operation of applications running on these versions of Spring ecosystem components such as Spring Framework, Spring Boot, Spring Data, Spring Security, etc. These components have either reached their end of standard support from vendors or have reached End of Life (EOL).</p><p>Our ELS for Spring service is designed to provide solutions for organizations that are not yet ready to migrate to newer versions and that are seeking long-term stability for their legacy Spring applications.</p><h2 id="connection-to-els-for-spring-repository" tabindex="-1"><a class="header-anchor" href="#connection-to-els-for-spring-repository" aria-hidden="true">#</a> Connection to ELS for Spring Repository</h2><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>This guide outlines the steps needed to integrate the TuxCare ELS for Spring repository into your Java application. The repository provides trusted Java libraries that can be easily integrated into your Maven as well as Gradle project.</p><h2 id="steps" tabindex="-1"><a class="header-anchor" href="#steps" aria-hidden="true">#</a> Steps</h2><h2 id="step-1-get-user-credentials" tabindex="-1"><a class="header-anchor" href="#step-1-get-user-credentials" aria-hidden="true">#</a> Step 1: Get user credentials</h2><p>You need username and password in order to use TuxCare ELS Spring repository. Anonymous access is disabled. To receive username and password please contact <a href="mailto:sales@tuxcare.com">sales@tuxcare.com</a></p><h2 id="step-2-create-or-modify-your-build-tool-settings" tabindex="-1"><a class="header-anchor" href="#step-2-create-or-modify-your-build-tool-settings" aria-hidden="true">#</a> Step 2: Create or Modify Your Build Tool Settings</h2><p><strong>Maven</strong></p><ul><li>If you are using Maven as your build automation tool, you will need to make changes in your <code>\${MAVEN_HOME}/settings.xml</code> file. If the file does not already exist in your <code>\${MAVEN_HOME}</code> directory, you should create one. Open the <code>settings.xml</code> file with a text editor and include the following configuration:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.1.0&quot;&gt;
    &lt;servers&gt;
        &lt;server&gt;
          &lt;id&gt;repository-id&lt;/id&gt;
          &lt;username&gt;\${env.USERNAME}&lt;/username&gt;
          &lt;password&gt;\${env.PASSWORD}&lt;/password&gt;
        &lt;/server&gt;
    &lt;/servers&gt;
&lt;/settings&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Set your credentials via the following environment variables:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export USERNAME=your-username
export PASSWORD=your-password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Here <code>your-username</code> and <code>your-password</code> are your credentials mentioned in the <a href="#step-1-get-user-credentials">Step 1</a>.</p><ul><li>You may choose an arbitrary allowed value instead of <code>repository-id</code> and use the same value in the following snippet from your <code>pom.xml</code> file:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;repositories&gt;
    &lt;repository&gt;
        &lt;id&gt;repository-id&lt;/id&gt;
        &lt;url&gt;https://nexus-repo.corp.cloudlinux.com/repository/els_spring/&lt;/url&gt;
    &lt;/repository&gt;
&lt;/repositories&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>An example maven project can be found <a href="https://github.com/cloudlinux/securechain-java/blob/main/examples/maven" target="_blank" rel="noopener noreferrer">here</a>. Do not forget to set the environment variables.</li></ul><p><strong>Gradle</strong></p><ul><li>If you are using Gradle as your build automation tool, make sure to include the following configuration in your project setup:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>repositories {
  maven {
    url = uri(&quot;https://nexus-repo.corp.cloudlinux.com/repository/els_spring&quot;)
    credentials {
            username = findProperty(&#39;USERNAME&#39;)
            password = findProperty(&#39;PASSWORD&#39;)
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Set your credentials via the following environment variables:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>export ORG_GRADLE_PROJECT_USERNAME=your-username
export ORG_GRADLE_PROJECT_PASSWORD=your-password
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Here <code>your-username</code> and <code>your-password</code> are your credentials mentioned in the <a href="#step-1-get-user-credentials">Step 1</a>.</p><ul><li>An example gradle project can be found <a href="https://github.com/cloudlinux/securechain-java/blob/main/examples/gradle" target="_blank" rel="noopener noreferrer">here</a>. Do not forget to set the environment variables.</li></ul><h2 id="verification" tabindex="-1"><a class="header-anchor" href="#verification" aria-hidden="true">#</a> Verification</h2><p>To confirm that the repository has been correctly established, include any library from the repository into your project and then run a build. The build tool you&#39;re using should be able to identify and resolve dependencies from the TuxCare ELS for Spring repository.</p><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion" aria-hidden="true">#</a> Conclusion</h2><p>You&#39;ve successfully integrated the TuxCare ELS for Spring repository into your project. You can now benefit from the secure and vetted Spring libraries it provides.</p><h2 id="resolved-cves-in-els-for-spring" tabindex="-1"><a class="header-anchor" href="#resolved-cves-in-els-for-spring" aria-hidden="true">#</a> Resolved CVEs in ELS for Spring</h2>`,31)),s(r)])}const p=i(d,[["render",l],["__file","index.html.vue"]]);export{p as default};
